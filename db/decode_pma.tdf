--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=12 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_pma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[11..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[11..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3190w[1..0]	: WIRE;
	w_anode3199w[3..0]	: WIRE;
	w_anode3216w[3..0]	: WIRE;
	w_anode3226w[3..0]	: WIRE;
	w_anode3236w[3..0]	: WIRE;
	w_anode3246w[3..0]	: WIRE;
	w_anode3256w[3..0]	: WIRE;
	w_anode3266w[3..0]	: WIRE;
	w_anode3276w[3..0]	: WIRE;
	w_anode3288w[1..0]	: WIRE;
	w_anode3295w[3..0]	: WIRE;
	w_anode3306w[3..0]	: WIRE;
	w_anode3316w[3..0]	: WIRE;
	w_anode3326w[3..0]	: WIRE;
	w_anode3336w[3..0]	: WIRE;
	w_anode3346w[3..0]	: WIRE;
	w_anode3356w[3..0]	: WIRE;
	w_anode3366w[3..0]	: WIRE;
	w_data3188w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[11..0] = eq_wire[11..0];
	eq_wire[] = ( ( w_anode3366w[3..3], w_anode3356w[3..3], w_anode3346w[3..3], w_anode3336w[3..3], w_anode3326w[3..3], w_anode3316w[3..3], w_anode3306w[3..3], w_anode3295w[3..3]), ( w_anode3276w[3..3], w_anode3266w[3..3], w_anode3256w[3..3], w_anode3246w[3..3], w_anode3236w[3..3], w_anode3226w[3..3], w_anode3216w[3..3], w_anode3199w[3..3]));
	w_anode3190w[] = ( (w_anode3190w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3199w[] = ( (w_anode3199w[2..2] & (! w_data3188w[2..2])), (w_anode3199w[1..1] & (! w_data3188w[1..1])), (w_anode3199w[0..0] & (! w_data3188w[0..0])), w_anode3190w[1..1]);
	w_anode3216w[] = ( (w_anode3216w[2..2] & (! w_data3188w[2..2])), (w_anode3216w[1..1] & (! w_data3188w[1..1])), (w_anode3216w[0..0] & w_data3188w[0..0]), w_anode3190w[1..1]);
	w_anode3226w[] = ( (w_anode3226w[2..2] & (! w_data3188w[2..2])), (w_anode3226w[1..1] & w_data3188w[1..1]), (w_anode3226w[0..0] & (! w_data3188w[0..0])), w_anode3190w[1..1]);
	w_anode3236w[] = ( (w_anode3236w[2..2] & (! w_data3188w[2..2])), (w_anode3236w[1..1] & w_data3188w[1..1]), (w_anode3236w[0..0] & w_data3188w[0..0]), w_anode3190w[1..1]);
	w_anode3246w[] = ( (w_anode3246w[2..2] & w_data3188w[2..2]), (w_anode3246w[1..1] & (! w_data3188w[1..1])), (w_anode3246w[0..0] & (! w_data3188w[0..0])), w_anode3190w[1..1]);
	w_anode3256w[] = ( (w_anode3256w[2..2] & w_data3188w[2..2]), (w_anode3256w[1..1] & (! w_data3188w[1..1])), (w_anode3256w[0..0] & w_data3188w[0..0]), w_anode3190w[1..1]);
	w_anode3266w[] = ( (w_anode3266w[2..2] & w_data3188w[2..2]), (w_anode3266w[1..1] & w_data3188w[1..1]), (w_anode3266w[0..0] & (! w_data3188w[0..0])), w_anode3190w[1..1]);
	w_anode3276w[] = ( (w_anode3276w[2..2] & w_data3188w[2..2]), (w_anode3276w[1..1] & w_data3188w[1..1]), (w_anode3276w[0..0] & w_data3188w[0..0]), w_anode3190w[1..1]);
	w_anode3288w[] = ( (w_anode3288w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3295w[] = ( (w_anode3295w[2..2] & (! w_data3188w[2..2])), (w_anode3295w[1..1] & (! w_data3188w[1..1])), (w_anode3295w[0..0] & (! w_data3188w[0..0])), w_anode3288w[1..1]);
	w_anode3306w[] = ( (w_anode3306w[2..2] & (! w_data3188w[2..2])), (w_anode3306w[1..1] & (! w_data3188w[1..1])), (w_anode3306w[0..0] & w_data3188w[0..0]), w_anode3288w[1..1]);
	w_anode3316w[] = ( (w_anode3316w[2..2] & (! w_data3188w[2..2])), (w_anode3316w[1..1] & w_data3188w[1..1]), (w_anode3316w[0..0] & (! w_data3188w[0..0])), w_anode3288w[1..1]);
	w_anode3326w[] = ( (w_anode3326w[2..2] & (! w_data3188w[2..2])), (w_anode3326w[1..1] & w_data3188w[1..1]), (w_anode3326w[0..0] & w_data3188w[0..0]), w_anode3288w[1..1]);
	w_anode3336w[] = ( (w_anode3336w[2..2] & w_data3188w[2..2]), (w_anode3336w[1..1] & (! w_data3188w[1..1])), (w_anode3336w[0..0] & (! w_data3188w[0..0])), w_anode3288w[1..1]);
	w_anode3346w[] = ( (w_anode3346w[2..2] & w_data3188w[2..2]), (w_anode3346w[1..1] & (! w_data3188w[1..1])), (w_anode3346w[0..0] & w_data3188w[0..0]), w_anode3288w[1..1]);
	w_anode3356w[] = ( (w_anode3356w[2..2] & w_data3188w[2..2]), (w_anode3356w[1..1] & w_data3188w[1..1]), (w_anode3356w[0..0] & (! w_data3188w[0..0])), w_anode3288w[1..1]);
	w_anode3366w[] = ( (w_anode3366w[2..2] & w_data3188w[2..2]), (w_anode3366w[1..1] & w_data3188w[1..1]), (w_anode3366w[0..0] & w_data3188w[0..0]), w_anode3288w[1..1]);
	w_data3188w[2..0] = data_wire[2..0];
END;
--VALID FILE
