--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=12 LPM_WIDTH=4 data eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_i2a
( 
	data[3..0]	:	input;
	eq[11..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[11..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode3381w[3..0]	: WIRE;
	w_anode3398w[3..0]	: WIRE;
	w_anode3408w[3..0]	: WIRE;
	w_anode3418w[3..0]	: WIRE;
	w_anode3428w[3..0]	: WIRE;
	w_anode3438w[3..0]	: WIRE;
	w_anode3448w[3..0]	: WIRE;
	w_anode3458w[3..0]	: WIRE;
	w_anode3468w[3..0]	: WIRE;
	w_anode3479w[3..0]	: WIRE;
	w_anode3489w[3..0]	: WIRE;
	w_anode3499w[3..0]	: WIRE;
	w_anode3509w[3..0]	: WIRE;
	w_anode3519w[3..0]	: WIRE;
	w_anode3529w[3..0]	: WIRE;
	w_anode3539w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[3..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode3458w[3..3], w_anode3448w[3..3], w_anode3438w[3..3], w_anode3428w[3..3], w_anode3418w[3..3], w_anode3408w[3..3], w_anode3398w[3..3], w_anode3381w[3..3]);
	eq_wire2w[] = ( w_anode3539w[3..3], w_anode3529w[3..3], w_anode3519w[3..3], w_anode3509w[3..3], w_anode3499w[3..3], w_anode3489w[3..3], w_anode3479w[3..3], w_anode3468w[3..3]);
	w_anode3381w[] = ( (w_anode3381w[2..2] & (! data_wire[2..2])), (w_anode3381w[1..1] & (! data_wire[1..1])), (w_anode3381w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3398w[] = ( (w_anode3398w[2..2] & (! data_wire[2..2])), (w_anode3398w[1..1] & (! data_wire[1..1])), (w_anode3398w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3408w[] = ( (w_anode3408w[2..2] & (! data_wire[2..2])), (w_anode3408w[1..1] & data_wire[1..1]), (w_anode3408w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3418w[] = ( (w_anode3418w[2..2] & (! data_wire[2..2])), (w_anode3418w[1..1] & data_wire[1..1]), (w_anode3418w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3428w[] = ( (w_anode3428w[2..2] & data_wire[2..2]), (w_anode3428w[1..1] & (! data_wire[1..1])), (w_anode3428w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3438w[] = ( (w_anode3438w[2..2] & data_wire[2..2]), (w_anode3438w[1..1] & (! data_wire[1..1])), (w_anode3438w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3448w[] = ( (w_anode3448w[2..2] & data_wire[2..2]), (w_anode3448w[1..1] & data_wire[1..1]), (w_anode3448w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3458w[] = ( (w_anode3458w[2..2] & data_wire[2..2]), (w_anode3458w[1..1] & data_wire[1..1]), (w_anode3458w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3468w[] = ( (w_anode3468w[2..2] & (! data_wire[2..2])), (w_anode3468w[1..1] & (! data_wire[1..1])), (w_anode3468w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3479w[] = ( (w_anode3479w[2..2] & (! data_wire[2..2])), (w_anode3479w[1..1] & (! data_wire[1..1])), (w_anode3479w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3489w[] = ( (w_anode3489w[2..2] & (! data_wire[2..2])), (w_anode3489w[1..1] & data_wire[1..1]), (w_anode3489w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3499w[] = ( (w_anode3499w[2..2] & (! data_wire[2..2])), (w_anode3499w[1..1] & data_wire[1..1]), (w_anode3499w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3509w[] = ( (w_anode3509w[2..2] & data_wire[2..2]), (w_anode3509w[1..1] & (! data_wire[1..1])), (w_anode3509w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3519w[] = ( (w_anode3519w[2..2] & data_wire[2..2]), (w_anode3519w[1..1] & (! data_wire[1..1])), (w_anode3519w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3529w[] = ( (w_anode3529w[2..2] & data_wire[2..2]), (w_anode3529w[1..1] & data_wire[1..1]), (w_anode3529w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3539w[] = ( (w_anode3539w[2..2] & data_wire[2..2]), (w_anode3539w[1..1] & data_wire[1..1]), (w_anode3539w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
